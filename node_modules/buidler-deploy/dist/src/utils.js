"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const address_1 = require("@ethersproject/address");
const bignumber_1 = require("@ethersproject/bignumber");
let chainId;
async function getChainId(bre) {
    if (chainId) {
        return chainId;
    }
    try {
        chainId = await bre.ethereum.send("eth_chainId");
    }
    catch (e) {
        console.log("failed to get chainId, falling back on net_version...");
        chainId = await bre.ethereum.send("net_version");
    }
    if (chainId.startsWith("0x")) {
        chainId = bignumber_1.BigNumber.from(chainId).toString();
    }
    return chainId;
}
exports.getChainId = getChainId;
function loadAllDeployments(bre, deploymentsPath, onlyABIAndAddress, externalDeployments) {
    const all = {}; // TODO any is chainConfig
    fs.readdirSync(deploymentsPath).forEach(fileName => {
        const fPath = path.resolve(deploymentsPath, fileName);
        const stats = fs.statSync(fPath);
        let name = fileName;
        if (stats.isDirectory()) {
            let chainIdFound;
            const chainIdFilepath = path.join(fPath, ".chainId");
            if (fs.existsSync(chainIdFilepath)) {
                chainIdFound = fs
                    .readFileSync(chainIdFilepath)
                    .toString()
                    .trim();
                name = fileName;
            }
            else {
                throw new Error(`with buidler-deploy >= 0.6 you need to rename network folder without appended chainId
          You also need to create a '.chainId' file in the folder with the chainId`);
            }
            if (!all[chainIdFound]) {
                all[chainIdFound] = {};
            }
            const contracts = loadDeployments(deploymentsPath, fileName, onlyABIAndAddress);
            all[chainIdFound][name] = {
                name,
                chainId: chainIdFound,
                contracts
            };
        }
    });
    if (externalDeployments) {
        for (const networkName of Object.keys(externalDeployments)) {
            for (const folderPath of externalDeployments[networkName]) {
                const networkConfig = bre.config.networks[networkName];
                if (networkConfig && networkConfig.chainId) {
                    const networkChainId = networkConfig.chainId.toString();
                    const contracts = loadDeployments(folderPath, "", onlyABIAndAddress, undefined, networkChainId);
                    all[chainId][networkName] = {
                        name: networkName,
                        chainId: networkChainId,
                        contracts
                    };
                }
                else {
                    console.warn(`export-all limitation: attempting to load external deployments from ${folderPath} without chainId info. Please set the chainId in the network config for ${networkName}`);
                }
            }
        }
    }
    return all;
}
exports.loadAllDeployments = loadAllDeployments;
function deleteDeployments(deploymentsPath, subPath) {
    const deployPath = path.join(deploymentsPath, subPath);
    fs.removeSync(deployPath);
}
exports.deleteDeployments = deleteDeployments;
function loadDeployments(deploymentsPath, subPath, onlyABIAndAddress, expectedChainId, truffleChainId) {
    const deploymentsFound = {};
    const deployPath = path.join(deploymentsPath, subPath);
    let filesStats;
    try {
        filesStats = exports.traverse(deployPath, undefined, undefined, name => !name.startsWith(".") && name !== "solcInputs");
    }
    catch (e) {
        // console.log('no folder at ' + deployPath);
        return {};
    }
    if (filesStats.length > 0) {
        if (expectedChainId) {
            const chainIdFilepath = path.join(deployPath, ".chainId");
            if (fs.existsSync(chainIdFilepath)) {
                const chainIdFound = fs
                    .readFileSync(chainIdFilepath)
                    .toString()
                    .trim();
                if (expectedChainId !== chainIdFound) {
                    throw new Error(`Loading deployment in folder '${deployPath}' (with chainId: ${chainIdFound}) for a different chainId (${expectedChainId})`);
                }
            }
            else {
                throw new Error(`with buidler-deploy >= 0.6 you are expected to create a '.chainId' file in the deployment folder`);
            }
        }
    }
    let fileNames = filesStats.map(a => a.relativePath);
    fileNames = fileNames.sort((a, b) => {
        if (a < b) {
            return -1;
        }
        if (a > b) {
            return 1;
        }
        return 0;
    });
    for (const fileName of fileNames) {
        if (fileName.substr(fileName.length - 5) === ".json") {
            const deploymentFileName = path.join(deployPath, fileName);
            let deployment = JSON.parse(fs.readFileSync(deploymentFileName).toString());
            if (!deployment.address && deployment.networks) {
                if (truffleChainId && deployment.networks[truffleChainId]) {
                    // TRUFFLE support
                    const truffleDeployment = deployment; // TruffleDeployment;
                    deployment.address =
                        truffleDeployment.networks[truffleChainId].address;
                    deployment.transactionHash =
                        truffleDeployment.networks[truffleChainId].transactionHash;
                }
            }
            if (onlyABIAndAddress) {
                deployment = {
                    address: deployment.address,
                    abi: deployment.abi,
                    linkedData: deployment.linkedData
                };
            }
            const name = fileName.slice(0, fileName.length - 5);
            // console.log('fetching ' + deploymentFileName + '  for ' + name);
            deploymentsFound[name] = deployment;
        }
    }
    return deploymentsFound;
}
function addDeployments(db, deploymentsPath, subPath, expectedChainId, truffleChainId) {
    const contracts = loadDeployments(deploymentsPath, subPath, false, expectedChainId, truffleChainId);
    for (const key of Object.keys(contracts)) {
        db.deployments[key] = contracts[key];
    }
}
exports.addDeployments = addDeployments;
function transformNamedAccounts(configNamedAccounts, chainIdGiven, accounts, networkConfigName) {
    const namedAccounts = {};
    // TODO transform into checksum  address
    if (configNamedAccounts) {
        const accountNames = Object.keys(configNamedAccounts);
        function parseSpec(spec) {
            let address;
            switch (typeof spec) {
                case "string":
                    if (spec.slice(0, 5) === "from:") {
                        const from = parseInt(spec.substr(5), 10);
                        address = [];
                        if (accounts) {
                            for (let j = from; j < accounts.length; j++) {
                                address.push(accounts[j]);
                            }
                        }
                    }
                    else if (spec.slice(0, 2).toLowerCase() === "0x") {
                        address = spec;
                    }
                    else {
                        address = parseSpec(configNamedAccounts[spec]);
                    }
                    break;
                case "number":
                    if (accounts) {
                        address = accounts[spec];
                    }
                    break;
                case "undefined":
                    break;
                case "object":
                    if (spec) {
                        if (spec.type === "object") {
                            address = spec;
                        }
                        else if (Array.isArray(spec)) {
                            // TODO fix :this will never reach here (Array is of type "object")
                            address = [];
                            for (const subSpec of spec) {
                                address.push(parseSpec(subSpec));
                            }
                        }
                        else {
                            const newSpec = chainConfig(spec, chainIdGiven, networkConfigName);
                            if (typeof newSpec !== "undefined") {
                                address = parseSpec(newSpec);
                            }
                        }
                    }
                    break;
            }
            if (address) {
                if (typeof address === "string") {
                    address = address_1.getAddress(address);
                }
                else if (typeof address === "object" && address.length) {
                    address = address.map(address_1.getAddress);
                }
            }
            return address;
        }
        for (const accountName of accountNames) {
            const spec = configNamedAccounts[accountName];
            namedAccounts[accountName] = parseSpec(spec);
        }
    }
    return namedAccounts;
}
function chainConfig(object, chainIdGiven, networkConfigName) {
    // TODO utility function:
    let chainIdDecimal;
    if (typeof chainIdGiven === "number") {
        chainIdDecimal = "" + chainIdGiven;
    }
    else {
        if (chainIdGiven.startsWith("0x")) {
            chainIdDecimal = "" + parseInt(chainIdGiven.slice(2), 16);
        }
        else {
            chainIdDecimal = chainIdGiven;
        }
    }
    if (typeof object[networkConfigName] !== "undefined") {
        return object[networkConfigName];
    }
    else if (typeof object[chainIdGiven] !== "undefined") {
        return object[chainIdGiven];
    }
    else if (typeof object[chainIdDecimal] !== "undefined") {
        return object[chainIdDecimal];
    }
    else {
        return object.default;
    }
}
function processNamedAccounts(bre, accounts, chainIdGiven) {
    if (bre.config.namedAccounts) {
        return transformNamedAccounts(bre.config.namedAccounts, chainIdGiven, accounts, bre.network.name);
    }
    else {
        return {};
    }
}
exports.processNamedAccounts = processNamedAccounts;
exports.traverse = function (dir, result = [], topDir, filter // TODO any is Stats
) {
    fs.readdirSync(dir).forEach(name => {
        const fPath = path.resolve(dir, name);
        const stats = fs.statSync(fPath);
        if ((!filter && !name.startsWith(".")) || (filter && filter(name, stats))) {
            const fileStats = {
                name,
                path: fPath,
                relativePath: path.relative(topDir || dir, fPath),
                mtimeMs: stats.mtimeMs,
                directory: stats.isDirectory()
            };
            if (fileStats.directory) {
                result.push(fileStats);
                return exports.traverse(fPath, result, topDir || dir, filter);
            }
            result.push(fileStats);
        }
    });
    return result;
};
//# sourceMappingURL=utils.js.map